{"version":3,"sources":["Map.js","utils.js","Drawer.js","Search.js","About.js","App.js","serviceWorker.js","index.js"],"names":["mapBoxCreds","require","Map","ReactMapboxGl","styles","clusterMarker","width","height","borderRadius","backgroundColor","display","justifyContent","alignItems","color","border","cursor","marker","PlaceMap","geojson","selected","selectionCallback","zoom","setZoom","useState","center","setCenter","style","containerStyle","overflowX","overflowY","geometry","coordinates","ClusterMarkerFactory","pointCount","getLeaves","key","toString","onClick","zoomOnClick","features","filter","r","map","feature","data-feature","title","properties","Place","testString","re","RegExp","match","join","getCapitalLetters","AppDrawer","clearSelected","props","undefined","createLinks","menu","isUrl","href","Menu","target","rel","visible","placement","isMobile","mask","onClose","layout","column","Item","label","Hours","DirectOrder","ThirdParty","Neighborhood","Address","Search","options","value","opts","setOpts","setValue","position","top","right","zIndex","onSearch","search","newOpts","toLowerCase","includes","onSelect","selection","onChange","data","size","placeholder","enterButton","controlled","info","Modal","content","onOk","AboutButton","type","App","setSelected","_setSelected","window","location","About","Drawer","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","noCache","Date","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bd9a0dad.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { getCapitalLetters } from './utils';\nimport ReactMapboxGl, { Cluster, Marker, ZoomControl } from 'react-mapbox-gl';\nconst mapBoxCreds = require('./credentials.json');\n\n\nconst Map = ReactMapboxGl(mapBoxCreds);\n\nconst styles = {\n    clusterMarker: {\n        width: 35,\n        height: 35,\n        borderRadius: '50%',\n        backgroundColor: '#51D5A0',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        color: 'white',\n        border: '2px solid #56C498',\n        cursor: 'pointer'\n    },\n    marker: {\n        width: 25,\n        height: 25,\n        borderRadius: '50%',\n        backgroundColor: '#1890ff',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        border: '2px solid #096dd9'\n    }\n};\n\nconst PlaceMap = ({ geojson, selected, selectionCallback, zoom, setZoom }) => {\n\n    const [center, setCenter] = useState([-76.612294, 39.287074]);\n\n\n    const clusterClick = (coordinates, pointCount, getLeaves) => {\n        // setCenter(coordinates);\n        // setZoom([17]);\n    }\n\n    const clusterMarker = (coordinates, pointCount, getLeaves) => (\n        <Marker\n            key={coordinates.toString()}\n            coordinates={coordinates}\n            style={styles.clusterMarker}\n            onClick={() => clusterClick(coordinates, pointCount, getLeaves)}\n        >\n            <div>{pointCount}</div>\n        </Marker>\n    )\n    return (\n        <Map\n            // eslint-disable-next-line\n            style=\"mapbox://styles/mapbox/streets-v9\"\n            containerStyle={{\n                height: '100vh',\n                width: '100vw',\n                overflowX: \"hidden\",\n                overflowY: \"hidden\"\n            }}\n            center={selected && selected.geometry && selected.geometry.coordinates ? selected.geometry.coordinates : center}\n            zoom={zoom}\n        >\n            <ZoomControl />\n            <Cluster ClusterMarkerFactory={clusterMarker} zoomOnClick>\n                {geojson.features.filter(r => r.geometry != null).map((feature, key) => {\n                    return (\n                        <Marker\n                            key={key}\n                            style={styles.marker}\n                            coordinates={feature.geometry.coordinates}\n                            data-feature={feature}\n                            onClick={() => {\n                                setCenter(feature.geometry.coordinates);\n                                selectionCallback(feature);\n                            }}\n                        >\n                            <div title={feature.properties.Place} style={{cursor: \"pointer\", color: \"#FFF\"}}>\n                                {getCapitalLetters(feature.properties.Place.toString())}\n                            </div>\n                        </Marker>\n                    )\n                })}\n            </Cluster>\n        </Map>\n    );\n}\n\nexport default PlaceMap;","export const getCapitalLetters = (testString) => {\n    const re = RegExp(/\\b([A-Z])([a-z]+)?\\b/gm);\n    const match = testString.match(re);\n    let text;\n    if (match) {\n        text = match.map(r => r[0]).join(\"\")\n    } else {\n        text = testString;\n    }\n    return text;\n}\n\n","import React from 'react';\nimport { Drawer, Descriptions } from 'antd';\nimport { isMobile } from 'mobile-device-detect';\nimport isUrl from 'is-url';\n\nconst AppDrawer = ({ selected, clearSelected }) => {\n    const props = selected ? selected.properties : undefined;\n\n    const createLinks = (menu) => {\n        if(isUrl(menu)){\n            return (\n                <a href={props.Menu} target=\"_blank\" rel=\"noopener noreferrer\">{props.Menu}</a>\n            )\n        } else {\n            return (\n                <span>{menu}</span>\n            )\n        }\n    }\n\n    return (\n        <Drawer\n            visible={selected !== undefined}\n            placement={ isMobile ? \"bottom\" : \"left\"} \n            mask={false}\n            //  \n            onClose={() => clearSelected(undefined)}\n            height=\"35vh\"\n            width=\"300px\"\n        >\n            {selected &&\n                <Descriptions title={props.Place} layout=\"vertical\" column={1}>\n                    <Descriptions.Item label=\"Menu\">\n                        {createLinks(props.Menu)}\n                    </Descriptions.Item>\n                    <Descriptions.Item label=\"Hours\">{props.Hours}</Descriptions.Item>\n                    <Descriptions.Item label=\"Direct Order\">{createLinks(props.DirectOrder)}</Descriptions.Item>\n                    <Descriptions.Item label=\"Third Party\">{createLinks(props.ThirdParty)}</Descriptions.Item>\n                    <Descriptions.Item label=\"Neighborhood\">{props.Neighborhood}\n                    </Descriptions.Item>\n                    <Descriptions.Item label=\"Address\">\n                        {props.Address}\n                    </Descriptions.Item>\n                </Descriptions>\n            }\n        </Drawer>\n    )\n}\n\nexport default AppDrawer;","import React, { useState } from 'react';\nimport { AutoComplete, Input } from 'antd';\n\n\nconst Search = ({ geojson, selectionCallback }) => {\n\n    const options = geojson.features.map(r => ({ value: r.properties.Place }));\n    const [opts, setOpts] = useState(options);\n    const [value, setValue] = useState('');\n\n    const handleSearch = (search) => {\n        const newOpts = options.filter(\n            r => r.value\n                .toString()\n                .toLowerCase()\n                .includes(search.toLowerCase())\n        );\n        setOpts(newOpts);\n    };\n\n    const handleSelect = (selection) => {\n        const feature = geojson.features.filter(r => r.properties.Place === selection);\n        selectionCallback(feature[0]);\n        setValue('');\n    };\n\n    const handleChange = (data) => {\n        setValue(data);\n    };\n\n    return (\n        <AutoComplete\n            style={{ position: \"absolute\", top: 10, right: 45, width: 200, zIndex: 1000 }}\n            options={opts}\n            onSearch={handleSearch}\n            onSelect={handleSelect}\n            value={value}\n            onChange={handleChange}\n        >\n            <Input.Search size=\"small\" placeholder=\"search here\" enterButton controlled/>\n        </AutoComplete>\n    )\n}\n\nexport default Search;","import React from 'react';\nimport { Button, Modal } from 'antd';\n\nfunction info() {\n    Modal.info({\n        title: 'About',\n        content: (\n            <div>\n                <p>This map is sourced from /u/Ueatsoap's Google \n                    <a href=\"https://docs.google.com/spreadsheets/d/13WirtfPlWtnLJJs_5EAa0A79UJ72iGcvhthlF6KYAus\"> spreadsheet</a><br></br>\n                    Data is rebuilt every night based on changes in the spreadsheet.<br></br>\n                    Locations are derived from Google Maps.\n                </p>\n            </div>\n        ),\n        onOk() { },\n    });\n}\n\nconst AboutButton = () => {\n\n    return (\n        <Button\n            style={{ position: \"absolute\", top: 40, right: 45, width: 200, zIndex: 1000 }}\n            type=\"primary\"\n            size=\"small\"\n            onClick={info}\n        >About This Map</Button>\n    )\n}\n\nexport default AboutButton;","import React, { useState } from 'react';\nimport './App.css';\nimport Map from './Map'\nimport Drawer from './Drawer';\nimport Search from './Search';\nimport About from './About';\nconst geojson = require('./places.json');\n\n\nfunction App() {\n  const [selected, setSelected] = useState(undefined);\n  const [zoom, setZoom] = useState([11]);\n\n  const _setSelected = (feature) => {\n    window.location.href = `${window.location.href}#`\n    setSelected(feature);\n  }\n\n  const _handleSearch = (feature) => {\n    setZoom([17]);\n    setSelected(feature);\n  }\n\n  return (\n    <main>\n      <Search geojson={geojson} selectionCallback={_handleSearch} />\n      <About />\n      <Map\n        geojson={geojson}\n        selected={selected}\n        selectionCallback={_setSelected}\n        zoom={zoom}\n        setZoom={setZoom}\n      />\n      <Drawer selected={selected} clearSelected={_setSelected}></Drawer>\n    </main>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const noCache = new Date() * 1;\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js?nocache=${noCache}`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css'; \nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}